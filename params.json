{"name":"Oh-my-vim","tagline":"Awesome vim config for everyone.","body":"# Oh My Vim\r\n\r\n__Version 0.95  (2014-04-22)__\r\n\r\nEveryone should try this awesome vim config. It is clean, easy to use\r\nout of the box, well organized and easy to fork and maintain.\r\n\r\n# How to install\r\n\r\n## 1. Install a bunch of tools needed\r\n\r\nFor Mac OS, you can just [use my script](/tools/prepare_mac.sh) (require brew installed). This will\r\ninstall some necessory tools and the latest vim (7.4) *with lua support*.\r\n\r\n    curl -L https://raw.github.com/liangxianzhe/oh-my-vim/master/tools/prepare_mac.sh | sh\r\n\r\nFor Linux, you will need to figure out what the above script does, and install them\r\naccording (apt-get etc). Please note a vim with lua support is needed. \r\n\r\n## 2. Set up the vim:\r\n\r\nRun: [tools/install.sh](tools/install.sh)\r\n\r\n    curl -L https://raw.github.com/liangxianzhe/oh-my-vim/master/tools/install.sh | sh\r\n\r\nBy default it will install to ~/.oh-my-vim folder.\r\n\r\n## 3. Set up font:\r\nFor a better looking [powerline](https://github.com/bling/vim-airline), you will\r\nneed setting install a [patched font](https://github.com/bling/vim-airline#integrating-with-powerline-fonts).\r\n\r\nIf you are using mac, the above script has installed a font [DroidSansMono](https://github.com/Lokaltog/powerline-fonts/tree/master/DroidSansMono)\r\nfor you. Please set this font for your terminal. (For macvim or gvim, nothing\r\nneed to be done. For iTerm2, go for Profile - Open Profile - Default - Edit Profile - Text - None-ASCII Font.)\r\n\r\nNow open vim, it will set up a bunch of plugins at the first time. Then you are\r\nall set.\r\n\r\n# Configuration\r\n\r\nYou can overwrite default configuration and key bindings by using one of \r\nfollowing files:\r\n\r\n`~/.before.vimrc` will be loaded before everything else.\r\n\r\n`~/.local.vimrc` will be loaded after bundles are initialized and before\r\nthe settings take place. The idea was so people could add Bundle lines\r\nwithout having to worry about conflicts in vimrc when pulling. \r\n\r\n`~/.after.vimrc` will be loaded after all configuration options are set. \r\nThis is the best place to change default behaviour (keybindings) or\r\ncolor scheme.\r\n\r\n# Acknowledgments \r\n\r\nObviously I steal a lot work from others. Here is my special thanks to:\r\n\r\nJoe Di Castro (joedicastro)'s \r\n[dotfiles](https://github.com/joedicastro/dotfiles/tree/master/vim). Most part \r\nof this config is from Joe, including large amount of this README.  His idea of\r\nusing Unite to create UI for vim commands is brilliant.\r\n\r\nZaiste! (zaiste)'s [vimified](https://github.com/zaiste/vimified). Thanks to his \r\nsetup script.\r\n\r\nThey are not using any licence. But some dotfiles I borrow is using MIT license,\r\nso I go for MIT license as well.\r\n\r\n# Usage\r\n\r\nFirst please note:\r\n> `<Leader>` key is mapped to `,` \r\n\r\n> `<LocalLeader>` key is mapped to `<space>`\r\n\r\n> `<LocalLeader>u` i.e. `<space>u` will trigger the awesome Unite UI \r\n\r\nFirst give you a sense how the Unite UI looks like (grep, preview results, and\r\nopen selected files).\r\n\r\n![intro](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/intro.gif?raw=true \"intro\")\r\n\r\nThe rest of this doc will introduce most features or tools I use.\r\n\r\nYou will get to know the awesome Unite and how we use it.\r\n\r\n- [Unite](#unite)\r\n\r\nThen all feature are organized as packages. Each package is a .vimrc file. We\r\ngot a lot of benifit from modulization.\r\n\r\n- Each package is short, easy to read and modify. (Totally 1600+ lines vimrc is \r\nnot fun to read)\r\n- You can add a package you need (for example, java or ruby), and share with \r\npeople or send a pull-request. \r\n- You can ignore the package you don't need by setting a parameter \r\n`g:oh-my-vim_packages` in local.vimrc.\r\n\r\nHere is current packages.\r\n\r\n- [basic](#basic) - some basic vim config to make it easy to use\r\n- [code](#code) - general coding \r\n- [text](#text) - text edition\r\n- [grep](#grep) - search text in files\r\n- [searching](#searching) - search text in current buffer\r\n- [registers](#registers) - yanks, registers & history\r\n- [navigation](#navigation) - navigate by buffers, tabs & windows\r\n- [files](#files) - files & dirs\r\n- [git](#git) - git\r\n- [python](#python) - python\r\n- [web](#web) - web\r\n- [bookmarks](#bookmarks) - bookmarks\r\n- [vim](#vim) - vim \r\n- [neobundle](#neobundle) - plugins administration with neobundle\r\n- [spelling](#spelling) - spell checking & translation\r\n- [markdown](#markdown) - markdown\r\n- [tools](#tools) - some other tools\r\n\r\n<a id=\"unite\"></a>\r\n## Unite\r\n\r\nUnite is an interface that unifies various \"query results\" under a common\r\naspect and that follows Vim's default behavior (modal). It's almost an API\r\nthat we can use to build our own solutions. In fact, the author describes it as\r\n\"unite and create interfaces\". With Unite you can open a file, change the\r\nbuffer, choose a colorscheme, make a regex search (grep, Ack, Ag, ...), etc.\r\nEven you can take a look at the Vim registers, messages, help, command, functions,\r\n... In short, it is a Swiss army knife that, well used, allows us to replace\r\nseveral different plugins with only one (in this case: CtrlP, Ack, YankRing,\r\nTagmaTasks and Tagbar).\r\n\r\nThe Unite menu will show what functionality we have and what's their\r\nkey-mappings. You can always refer the menu for something you don't\r\nremember the shortcut.\r\n\r\nThe main Unite munu:\r\n![unite_menu](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu.png?raw=true \"unite_menu\")\r\n\r\n### Navigation inside Unite\r\n\r\nIn Unite, you can filter result in Insert mode, you can select candidates and \r\napply operations to selected candidates in Normal mode. Below are some of the \r\navailable mappings:\r\n\r\n> __Mappings__\r\n\r\n> __Normal__ mode:\r\n\r\n> - `q` exit from Unite and submenus\r\n> - `Q` exit from Unite and all submenus\r\n> - `i` change to insert mode\r\n> - `v` change to visual mode\r\n> - `<Tab>` choose an action\r\n> - `a` choose an action for the selected candidate or add text at the end of\r\n>   the prompt\r\n> - `<C-R>` reset the menu\r\n> - `<Space>` mark the current candidate\r\n> - `*` mark all candidates\r\n> - `M` removes the candidate number limit\r\n> - `gg`, `G`, `j`, `k` typical Vim moves to move around candidates\r\n> - `?` shows help (mappings)\r\n> - `N` add a new candidate (only where have sense)\r\n> - `.` show hidden files (dotfiles)\r\n\r\n>     *With a candidate selected:*\r\n\r\n>     - `<CR>` execute the default action\r\n>     - `b` add it to bookmarks\r\n>     - `d` delete it\r\n>     - `e` expand the path\r\n>     - `t` open the candidate in a new tab\r\n>     - `yy` do a yank\r\n>     - `p` preview it\r\n>     - `x` launch the quick selection\r\n\r\n> __Insert__  mode:\r\n\r\n> - `<ESC>` change to normal mode\r\n> - `<Tab>` choose an action\r\n> - `<CR>`  execute the default action\r\n> - `<C-G>` exit Unite\r\n> - `<C-D>` delete it\r\n> - `<C-E>` expand the path\r\n> - `<C-T>` open the candidate in a new tab\r\n> - `<C-Y>` do a yank\r\n> - `<C-N>`, `<C-P>`, `<C-F>` y `<C-B>` Vim motions to move around candidates\r\n\r\n>     *With a candidate selected:*\r\n\r\n>     - `<Space>` mark the current candidate\r\n\r\n> __Visual__ mode:\r\n\r\n> - `<Space>` mark the current candidate\r\n\r\n<a id=\"basic\"></a>\r\n## Basic\r\n\r\nPut most basic vim config here, like indent, quick saving, history, backup.\r\nThere is no Unite menu for this package.  \r\n\r\n<a id=\"code\"></a>\r\n## Code\r\n\r\n![unite code](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu_code.png?raw=true \"unite code\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>c` or `:Unite menu:code`, shows the Code menu\r\n\r\n__Menu__\r\n\r\nThese are the menu entries in detail:\r\n\r\n- *count lines of code* count the lines of code of the current file by the\r\n  external program `$ cloc` and shows the output in Unite\r\n\r\n- *toggle indent lines* show/hide the indent lines, that works as a visual guide\r\n  for long nested blocks of code, putting vertical lines for each indentation\r\n  level. Is disabled by default.\r\n    ![indentLine](http://joedicastro.com/static/pictures/indentline_en.gif \"indentLine\")\r\n\r\n- *syntastic toggle*,  *syntastic check & errors* are two options\r\n  of Syntastic, a plugin for code quality (syntax revision) for various\r\n  programming and markup languages (python, ruby, lua, haskell, css, html, js,\r\n  json, ...) via external tools (these tools are required). Show the syntax\r\n  errors in the signs column (gutter). Also shows the total of errors and the\r\n  number line of the first in the status line\r\n\r\n__Other tools__\r\n\r\n- __Ultisnips__ is a plugin to manage snippets, the most advanced and powerful\r\n  for this task that I know for Vim. Snippets are portions of code or text in\r\n  which certain parts are declared as variable and the rest is fixed. They are\r\n  very helpful to insert the same code structures again and again without need\r\n  to write all the text, saving us an important number of keystrokes. To use\r\n  them we only have to type the snippet keyword and the mapping, the fixed part\r\n  of text is inserted automatically. Then the cursor moves to the first variable\r\n  field to enter the desired text interactively, and so on. In the image you can\r\n  see how it really works.\r\n\r\n    Ultisnips brings by default a bunch of snippets classified for languages and\r\nsome globals. The best feature of Ultisnips is that allows us to define our\r\ncustom snippets with a level of control and automation than any other one\r\noffers. To know all the details is essential to read carefully the plugin help.\r\nBTW certain features are remarkable, like: nested snippets, embed external\r\ncommands (shell, vimscript and python) in the snippets, use the snippets over\r\nvisual selections, and text transformations into the snippets.\r\n\r\n    ![ulti](http://joedicastro.com/static/pictures/ulti_en.gif \"ulti\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `<Tab>` preceded by the snippet keyword, trigger the snippet\r\n    > - `<C-J>` jump to the next field\r\n    > - `<C-K>` jump to the previous field\r\n    > - `<BS>`  cancel the text enter in an optional field\r\n\r\n<a id=\"code\"></a>\r\n## Text\r\n\r\n![unite text](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu_text.png?raw=true \"unite text\")\r\n\r\nThis menu groups several options to edit text\r\n\r\n__Unite__\r\n\r\n`<LocalLeader>e` or `:Unite menu:text` shows the text menu\r\n\r\n__Menu__\r\n\r\n- *toggle search results highlight* toggle the search results highlight,\r\n  obviously\r\n\r\n- *toggle line numbers* toggle between the four possible visualizations of the\r\n  line numbers column: none, relative (two forms), and absolute\r\n\r\n- *toggle wrapping* toggle automatic wrapping and the vertical column color. The\r\n  vertical column that indicates wrapping threshold turns green when the\r\n  automatic wrapping is disabled\r\n\r\n- *show hidden chars* show the hidden chars, those that are not printable\r\n  (tabs, carriage returns, spaces, ...)\r\n\r\n- the next three entries are to fold/unfold the folds in our doc, one by one or\r\n  all at the same time\r\n\r\n- and the three after those allows us to copy/paste from system clipboard and\r\n  for toggle the paste mode.\r\n\r\n- *remove trailing whitespaces* delete those empty and almost never significant\r\n  spaces at the end of the line\r\n\r\n- *text statistics* show the number of columns, lines, words, chars and\r\n  bytes in total and for the current position\r\n\r\n- *show word frequency* show the number of times that each word appears in the text\r\n\r\n- *show available digraphs* show a table with all the digraphs available and\r\n  the pair of chars needed to generate each of them.\r\n\r\n- *insert lorem ipsum text* insert a text block containing the famous [Lorem\r\n  Ipsum][lorem] text\r\n\r\n   [lorem]: http://es.wikipedia.org/wiki/Lorem_ipsum\r\n\r\n- *show current char info* show extended info about the current character.\r\n  The info includes the decimal Unicode value, hexadecimal, octal, Unicode name,\r\n  HTML entity, Emoji code and any digraph available.\r\n\r\n__Other text edition tools__\r\n\r\nApart from the tools included in the menu, and apart from the Vanilla Vim ones\r\ntoo, we have another bunch of tools available to help us to edit the text more\r\neasily.\r\n\r\n- __text-objects__ these are customized text objects that allow us to extend the\r\n  Vim motions defined by default (word, sentence, paragraph, block,\r\n  delimiters, and markup tags) and be able to use more efficient text\r\n  selections. In this config I added the following ones:\r\n\r\n    > - __line__ select a line by `al` or `il`\r\n    > - __underscore__ select the text surrounded by underscores via `a_` or\r\n    >   `i_`\r\n    > - __all the buffer__ select the entire buffer. We can use `ae` and `ie`\r\n    > - __indent__ select a indentation level. Options: `ai`, `ii`,\r\n    >   `aI`, `iI`. `i` select the current level and the nested ones, `I` only\r\n    >   selects the current indent level\r\n    > - __last search__ select the last search term results. Options:: `a/`,\r\n    >   `i/`, `a?` and `i?`\r\n    > - __python class__ in a Python code file, selects a class by `aC`, `iC`\r\n    >   and `C`\r\n    > - __python method or function__ same as above for methods and functions\r\n    >   via `aM`, `iM` and `M`\r\n\r\n- __vim-commentary__ an extremely easy tool to toggle commentary in lines and\r\n  visual selections. We only need to enter a mapping and a movement to do the\r\n  action, as simple as that.\r\n\r\n    ![commentary](http://joedicastro.com/static/pictures/commentary_en.gif \"commentary\")\r\n\r\n    > __Mapping__\r\n    >\r\n    >  - `<Leader>c` or `gc` toggle the commentary\r\n\r\n- __vim-surround__ surround a vim text object with a pair of symmetrical\r\n  chars.  We can also remove or change the ones already there\r\n\r\n    ![surround](http://joedicastro.com/static/pictures/surround_en.gif \"surround\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `ys{motion or text-object}{char}` create surround (*'your surround'*)\r\n    > - `cs{orig_char}{dest_char}` change surround\r\n    > - `ds{char}` delete surround\r\n    > - `S{char}` for create surrounds in visual mode\r\n\r\n    > *If we choose the first member of a pair, e.g '(', then the surround is\r\n    > created with a whitespace between the char and the selection. If the last\r\n    > is choosen, e.g. ')', then the extra space is not added.*\r\n\r\n- __vim-speeddating__ provides a smart way to increase/decrease time values\r\n\r\n    ![speeddating](http://joedicastro.com/static/pictures/speeddating_en.gif \"speeddating\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `<C-A>` Increase the time value under the cursor\r\n    > - `<C-X>` Decrease the time value under the cursor\r\n    > - `d<C-A>` Change the time under the cursor to the current UTC time\r\n    > - `d<C-X>` Change the time under the cursor to the current Local time\r\n\r\n- __delimitMate__ provides smart auto-completion for delimiters like\r\n  __(), {}, [], \"\", '', ``__\r\n\r\n    This is very easy to use. If we write the first pair of these chars, then\r\n    the second one is automatically introduced and the cursor moves to the\r\n    interior thereof. Then, we continue writing and to exit the inside you only\r\n    have to write the second character or press `<S-Tab>`. If you only want the\r\n    first char, you only have to press the __Delete__ key\r\n\r\n    ![smartinput](http://joedicastro.com/static/pictures/smartinput_en.gif \"smartinput\")\r\n\r\n- __neocomplete__ auto-completion of keywords, methods, functions, etc by only\r\n  typing a few letters (normally the first). Well used, this speeds up a lot writing\r\n  of code or text. It improves the Vanilla Vim auto-completion, with a live\r\n  fuzzy-logic search. It's powerful and totally customizable.\r\n\r\n    ![neocomp](http://joedicastro.com/static/pictures/neocomp_en.gif \"neocomp\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `<CR>`    insert the selected word\r\n    > - `<C-N>`   go to the next word (below) in the option list\r\n    > - `<C-P>`   go to the previous word (above) in the option list\r\n\r\n- __easydigraph__ easily insert digraphs, especially when trying to insert\r\n  several simultaneously\r\n\r\n    ![easydigraph](http://joedicastro.com/static/pictures/easydigraph_en.gif \"easydigraph\")\r\n    >\r\n    > __Mapping__\r\n    >\r\n    > - `<Leader>dd {motion}` turns in digraph the motion selected text\r\n\r\n- __vim-transpose__ transpose rows & columns. For certain kind of files, like\r\n  *CSV*, it can be really helpful to deal with them. It works in visual mode.\r\n\r\n    ![transpose](http://joedicastro.com/static/pictures/transpose_en.gif \"transpose\")\r\n\r\n    > __Commands__\r\n\r\n    > - `:Transpose` do the transposition by default\r\n    > - `:TransposeCSV {separator} {delimiter}` do the transposition by `;` or by\r\n    >   the specified separator & delimiter\r\n    > - `:TransposeTab` transpose by tabs\r\n    > - `:TransposeWords` transpose by words (inserts a `?` where is no one)\r\n    > - `:TransposeInteractive` for complex transpositions\r\n\r\n<a id=\"grep\"></a>\r\n## Grep\r\n\r\n![unite grep](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu_grep.png?raw=true \"unite grep\")\r\n\r\nThis menu allows us to search files by regular expression engines. I have it\r\nconfigured to use the `ag` program first, then `ack` if `ag` is not found, and\r\nelse the `grep` program. We can also use other Unix tools like `locate` and\r\n`find` from this menu.\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>a` or `:Unite menu:grep` shows the grep menu\r\n\r\n__Menu__\r\n\r\n- *grep (ag → ack → grep)* search files by content. Using a regular\r\n  expression pattern in a target directory, shows us the results in Unite.\r\n  Between brackets are the list of programs to use sorted by priority. It uses\r\n  the first available.\r\n\r\n- *grep current word* grep the word under cursor.\r\n\r\n- *find* use the known Unix tool `find` to search files by name\r\n\r\n- *locate* same as above using the `locate` tool instead\r\n\r\n- *vimgrep* as a last resort, in case you don't have any regex search tool\r\n  installed, you can use the internal Vim grep one. But it is extremely low\r\n  in comparison with another of the mentioned in the first entry. So, use it\r\n  only if you are desperate.\r\n\r\n<a id=\"searching\"></a>\r\n## Searching inside the buffer\r\n\r\n![unite searching](http://joedicastro.com/static/pictures/unite_menu_searching.png \"unite searching\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>f` or `:Unite menu:searching` shows the searching menu\r\n\r\n__Menu__\r\n\r\n- *line* find all the lines where the introduced string appears\r\n\r\n- *word under the cursor* find all the lines where the word under the cursor\r\n  appears. It is a improved version of the `*` key behavior\r\n\r\n- *outlines & tags (ctags)* list all the document \"outlines\" and allow us to\r\n  navigate between them. Very useful to move around the headers of a Markdown\r\n  document like this. In code files it shows the source tags (ctags) to move\r\n  easily to a given point of the code.\r\n\r\n- *marks* list all the marks\r\n\r\n- *folds* navigate among folders\r\n\r\n- *changes* list all the changes made to the file\r\n\r\n- *jumps* list all the last window jumps\r\n\r\n- *undos* show the file undo history\r\n\r\n- *tasks* show all the pending tasks for the current buffer. These tasks (and notes)\r\n  are defined by the following keywords: __TODO__, __FIXME__, __NOTE__, __XXX__\r\n  , __COMBAK__, and __@todo__\r\n\r\n__Other tools__\r\n\r\n- __vim-signature__ a plugin that improves the default Vim marks. It shows the\r\n  marks in the lateral signs column.\r\n\r\n    ![signature](http://joedicastro.com/static/pictures/signature_en.gif \"signature\")\r\n\r\n    > __Mappings__\r\n\r\n    > - Alphabetic marks\r\n\r\n    >   - `m[a-zA-Z]` toggle the mark and display it in the signs column (gutter)\r\n    >   -  `m,`       place the next available mark\r\n    >   -  `m<Space>` delete all marks\r\n    >   -  <code>]`</code>  jump the next mark\r\n    >   -  <code>[`</code>  jmmp the previous mark\r\n    >   -  `]'`       jump to start of next line containing a mark\r\n    >   -  `['`       jump to start of previous line containing a mark\r\n\r\n    > - Symbol marks (markers)\r\n\r\n    >   -  `m[0-9]`       toggle the corresponding marker `!@#$%^&*()`\r\n    >   -  `m<S-[0-9]>`   remove all markers of the same type\r\n    >   -  `]-`           jump to next line having same marker\r\n    >   -  `[-`           jump to prev line having same marker\r\n    >   -  `m<BS>`        remove all markers\r\n\r\n<a id=\"registers\"></a>\r\n## Registers\r\n\r\n![unite registers](http://joedicastro.com/static/pictures/unite_menu_registers.png \"unite registers\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>i` or `:Unite menu:registers` shows the registers menu\r\n\r\n__Menu__\r\n\r\n- *yanks* list all the yanks arranged chronologically starting with the most\r\n  recent\r\n\r\n- *commands* show the Ex command history\r\n\r\n- *searches* list the last searches\r\n\r\n- *registers* show the vim registers content\r\n\r\n- *messages* show the messages register (like the `:messages` command)\r\n\r\n- *undo* launch the Gundo plugin. Gundo makes the Vim undo tree friendlier. We\r\n  can preview the changes and navigate easily around the tree.\r\n\r\n    ![gundo](http://joedicastro.com/static/pictures/gundo_en.gif \"gundo\")\r\n\r\n<a id=\"navigation\"></a>\r\n## Navigation\r\n\r\n![unite navigation](http://joedicastro.com/static/pictures/unite_menu_navigation.png \"unite navigation\")\r\n\r\n>   __Mappings__\r\n\r\n> In addition to the options available on the menui, I have set a number of\r\n> mappings that make it much easier to manage windows\r\n\r\n>   - `<C-H>` move to the next window to the left\r\n>   - `<C-J>` move to the lower window\r\n>   - `<C-K>` move to the upper window\r\n>   - `<C-L>` move to the next window to the right\r\n\r\n__Unite__\r\n\r\n`<LocalLeader>b` or `:Unite menu:navigation` shows the navigation menu\r\n\r\n__Menu__\r\n\r\n- The first three menu entries let us to easily move to the chosen buffer, tab,\r\n  or window from the candidates\r\n\r\n- *location list* and *quickfix* to access these windows content through\r\n  Unite interface\r\n\r\n- *resize windows* use the winresizer plugin to easily resize the windows\r\n\r\n    > __Mappings__\r\n    >\r\n    > - `h`, `j`, `k`, `l` use vim motions to move the windows separator\r\n    > - `<ESC>` end the resizing\r\n    > - `q` cancel the resizing\r\n\r\n- the next two entries are for creating new windows (horizontal and vertical) and\r\n  the third one is to close any window (except the last)\r\n\r\n- *toggle quickfix window* toggle the quickfix window, also close the location\r\n  list if is opened\r\n\r\n- *zoom* make zoom in a window\r\n\r\n- *delete buffer* delete a buffer\r\n\r\n<a id=\"files\"></a>\r\n## Files and directories\r\n\r\n![unite files](http://joedicastro.com/static/pictures/unite_menu_files.png \"unite files\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>o` or `:Unite menu:archivos` show the file menu\r\n\r\n__Menu__\r\n\r\n- *open file* show a list of files available in the current working directory\r\n\r\n- *open more recently used files* show the last opened files\r\n\r\n- *open file with recursive search* same as above but including the files under\r\n  the subdirectories recursively\r\n\r\n- the next three entries are similar to the preceding ones but working with\r\n  directories instead of files\r\n\r\n- *make new directory* make a new directory without opening a file browser\r\n\r\n- *change working directory* allow us to change the current working directory\r\n\r\n- *know current working directory* is like running the `:pwd` command\r\n\r\n- *junk files* to open a new (or a previous one) junk file to make annotations,\r\n  tests, ...\r\n\r\n- *save as root* allow us to save a file that only have permissions for `root`\r\n  without need to run Vim under that user (or use `$ sudo`) and lost our\r\n  configuration advantages by doing that.\r\n\r\n- *quick save* save quickly the file without need to run the `:w` command\r\n\r\n- *open ranger* call the external ncurses file manager [Ranger][rngr] to browse\r\n  the directory hierarchy and choose the file that you want to edit.\r\n\r\n  [rngr]:http://joedicastro.com/productividad-linux-ranger.html\r\n\r\n    ![ranger](http://joedicastro.com/static/pictures/ranger_vim_en.gif \"ranger\")\r\n\r\n- *open vimfiler* open the file explorer Vimfiler, Unite based and very\r\n  powerful. I used mainly in those computers where ranger is not available. It\r\n  has a safe mode (enabled by default) in which you cannot copy, rename, move,\r\n  create or delete files and directories.\r\n\r\n    ![vimfiler](http://joedicastro.com/static/pictures/vimfiler_en.png \"vimfiler\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `<Tab>` open a new vertical window, if is already opened toggle between them\r\n    > - `j`, `k` and `gg` typical vim motions to move between the files\r\n    > - `h`, `l` move between the parent and child directories\r\n    > - `<Space>` select/deselect the current line\r\n    > - `*` select/deselect all the lines\r\n    > - `&` select similar lines\r\n    > - `U` deselect everything\r\n    > - `S` change the sort type (by name, date, size, ...)\r\n    > - `c` copy the file (preceded by `C` do it to the clipboard)\r\n    > - `m` move the file(preceded by `C` do it to the clipboard)\r\n    > - `d` delete the file\r\n    > - `r` rename the file\r\n    > - `Cp` paste file from clipboard\r\n    > - `K` new directory\r\n    > - `N` new file\r\n    > - `x` run the file's system associated program\r\n    > - `e` edit the file\r\n    > - `E` edit the file in a new window\r\n    > - `v` preview the file\r\n    > - `L` change the drive unit\r\n    > - `~` go to the `home` directory\r\n    > - <code>\\\\</code> go to the `root` directory\r\n    > - `<C-J>` open the visited directories history (opened by <CR>)\r\n    > - `<CR>` open a directory\r\n    > - `<BS>` return to the parent directory\r\n    > - `t` expand the directory tree\r\n    > - `T` expand the directory tree recursively\r\n     - `I` change to the directory entered in the command line\r\n    > - `M` set the current mask (to filter files)\r\n    > - `.` show/hide the hidden files (dotfiles)\r\n    > - `q` hide vimfiler\r\n    > - `Q` exit vimfiler\r\n    > - `H` exit to the shell (exit from shell to return to vimfiler)\r\n    > - `-` close the current vimfiler window\r\n    > - `?` show the vimfiler help (mappings)\r\n    > - `o` sync another vimfiler with this one\r\n    > - `O` open a file/directory in another vimfiler\r\n    > - `yy` yank the full path\r\n    > - `gr` make grep into the current directory\r\n    > - `gf` make find into the current directory\r\n    > - `gc` make the current directory in the Vim working directory\r\n    > - `a` choose the action to apply to the file\r\n    > - `Y` save the current path in a temporal list\r\n    > - `P` show the paths saved in the temporal list\r\n    > - `<C-L>` redraw the screen\r\n    > - `gs` toggle the safe mode __Warning!__\r\n    > - `gS` toggle the simple mode\r\n\r\n<a id=\"git\"></a>\r\n## Git\r\n\r\n![unite git](http://joedicastro.com/static/pictures/unite_menu_git_en.png \"unite git\")\r\n\r\n__Unite__\r\n\r\n- `<localleader>g` or `:Unite menu:git` show the git menu\r\n\r\n__Menu__\r\n\r\n- *tig* open the external application [tig][tig], which is a ncurses interface\r\n  for git. Obviously, this only works when the working directory is into a git\r\n  repository.\r\n\r\n    ![tig](http://joedicastro.com/static/pictures/tig_en.gif \"tig\")\r\n\r\n  [tig]: https://github.com/jonas/tig\r\n\r\n- *git viewer* and *git viewer - buffer* use the __gitv__ plugin that is a clone\r\n  of the `gitk` tool for Vim, which is the viewer provided originally by `git`.\r\n  This plugin allows us to view the repository history, to do diffs, checkouts,\r\n  merges, ... It works atop of Fugitive and requires of it for work, and both\r\n  have a similar behavior. The first entry will open a viewer relative to the\r\n  whole repository (explorer mode), while the second one will do it in function\r\n  of the current buffer or a visual selection (file mode)\r\n\r\n    ![gitv](http://joedicastro.com/static/pictures/gitv_en.png \"gitv\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `<CR>` open a commit, a diff, a tree, a file, more commits, etc,\r\n    >   depending of where is used, with a similar behavior that Fugitive\r\n\r\n    > - `o` open the commit in a new horizontal window\r\n\r\n    > - `O` open the commit in a new tab\r\n\r\n    > - `s` open the commit in a new vertical window\r\n\r\n    > - `i` in \"explorer mode\" open the file & in \"file mode\" open the commit\r\n    >   details\r\n\r\n    > - `q` exit from gitv\r\n\r\n    > - `a` toggle the `-all` argument and update the window\r\n\r\n    > - `u` update the window content\r\n\r\n    > - `co` do a `git checkout`. In \"explorer mode\" dot it over the whole\r\n    >   repository and in the \"file mode\" do it over the current file\r\n\r\n    > - `D` do a diff via vimdiff.\r\n\r\n    > - `S` show a `diffstat`\r\n\r\n    > - `m` and `<Leader>m` do a merge in visual and normal modes respectively\r\n\r\n    > - `git` enter the `:Git ` command in the command line to enter a custom\r\n    >   git command. If the command changes the repository status, the changes\r\n    >   will be updated in gitv\r\n\r\n    > - `yc` yank the commit short hash, `sha`\r\n\r\n    > __Motions__\r\n\r\n    > - `x` and `X` to move around the branch points (where a merge is created)\r\n\r\n    > - `r` and `R` to move around the references\r\n\r\n    > - `P` jump to the commit tagged as `HEAD`\r\n\r\n\r\n- Almost of the rest of the entries are typical git commands which are executed\r\n  via the __Fugitive__ tool. Fugitive is a git wrapper, so good that allows us\r\n  to manage git repositories without leave Vim. It's so complete and powerful\r\n  that requires a certain amount of time to get used to it and get total control\r\n  over its particular interface. The author, Tim Pope, says that about it: \"A\r\n  Git wrapper so awesome, it should be illegal\" and is almost true.\r\n\r\n      ![fugitive](http://joedicastro.com/static/pictures/fugitive_en.png \"fugitive\")\r\n\r\n    - *status* show the repository status and from this window we can access to\r\n      multiple options. In this window this mappings are available:\r\n\r\n        > __Mappings__\r\n\r\n        > - `<C-N>` and `<C-P>` allow us to move between files\r\n\r\n        > - `<CR>` run the `:Gedit` command that allow us to \"edit\" a revision\r\n\r\n        > - `-` using it over a file that is not included in the 'stage area'\r\n        >   (index) it add it, is like run a `git add` or `git stage` in the\r\n        >   shell.  Using it over a file included in the `stage area`, remove it\r\n        >   from there, like using a `git reset`\r\n\r\n        > - `cc` or `C` do a commit with the command `:Gcommit` the same as\r\n        >   doing a `git commit`\r\n\r\n        > - `ca` do a commit which add the new changes to the previous commit,\r\n        >   useful when we forgot add something in a commit. Same as `git commit\r\n        >   --amend`\r\n\r\n        > - `D` make a diff between the current version and the index one, using\r\n        >   vimfiler via the `:Gdiff` command\r\n\r\n        > - `ds` do a diff with `:Gsdiff`, same as above but split windows\r\n        >   horizontally\r\n\r\n        > - `dv` do a diff without `:Gvdiff`, with vertical split windows. A\r\n        >   synonym of `D`\r\n\r\n        > - `dp` has a dual behavior. On the one hand, if there are changes but\r\n        >   those are not in the `stage area` (index), then show a diff with the\r\n        >   changes, like running the `git diff` command. Then, if we make a\r\n        >   `:Gwrite` (`<Leader>gw`) the changes are added to the index and we\r\n        >   can submit a commit now. On the other hand, if there are files that\r\n        >   are not being tracked, try to add them using the `git add\r\n        >   --intent-to-add .` command\r\n\r\n        > - `p` to submit partial commits, where we choose interactively which\r\n        >   changes portions are included in the index and which not. If we use\r\n        >   it over a file that is not in the index, we will we asked about what\r\n        >   parts we want to index, like running `git add --patch`. If we use it\r\n        >   with an already indexed file, we'll choose what parts remove from\r\n        >   the index, same as `git reset --patch`\r\n\r\n        > - `o` open the file in a new horizontal window\r\n\r\n        > - `O` open the file in a new tab\r\n\r\n        > - `S` open the file in a new vertical window\r\n\r\n        > - `R` update the status window\r\n\r\n        > - `q` close the status window\r\n\r\n    - *diff* make a diff (`:Gdiff`) between the current version of the file versus\r\n      the one in the index. In conflict situations like in a merge, it will we a\r\n      three-way diff, which makes it a good tool for dealing with `merge` and\r\n      `rebase`. The mapping available for this window are the following (to know how\r\n      vimdiff works, look up the help):\r\n\r\n        > __Mappings__\r\n\r\n        > - `do` do a `:diffget`, get the changes from the other file\r\n        > - `dp` do a `:diffput`, put the changes to the other file\r\n        > - `<Leader>du` do a  `:diffupdate`, update changes\r\n        > - `<Leader>dq` exit from diffmode\r\n        > - `u` undoes all changes\r\n        > - `[c` and `]c` to move between diffs\r\n        > - `:Gwrite` or `<Leader>gw` write the changes to the index\r\n\r\n    - *commit* use the `:Gcommit` command (same as `git commit`). If there is\r\n      nothing in the index, then do a `:Gstatus` and show the status window.\r\n      __Warning__: Unlike when running the actual git-commit command, it is\r\n      possible (but unadvisable) to muck with the index with commands like\r\n      git-add and git-reset while a commit message is pending\r\n\r\n    - *log* show all the previous revisions of the current file in a Unite\r\n      window, starting for the most recent and open the last in the current\r\n      buffer. To return to the current file, use `:Gedit` (`<Leader>ge`). Within\r\n      the buffer we can move between revision using the commands `:cnext`,\r\n      `:cprevious`, `:cfirst` and `:clast`\r\n\r\n    - *log - all* similar as the previous one, but in this case all the\r\n      repository commits are showed, and what appears in the buffer is something\r\n      similar to the `git show` command output\r\n\r\n    - *blame* use the `:Gblame` command that opens a new vertical widow at the\r\n      left of the current buffer, where is displayed the commit, the author and\r\n      date for each line of the file. Similar to run `git blame`.\r\n\r\n        > __Mappings__\r\n\r\n        > - `A` resize the blame window to end of author column\r\n        > - `C` resize the blame window to end of commit column\r\n        > - `D` resize the blame window to end of date column\r\n        > - `q` close the blame window\r\n        > - `gq` close the blame window and runs `:Gedit` to restore the current\r\n        >   version\r\n        > - `<CR>` close the blame window and open the selected commit\r\n        > - `o` open the selected commit in a new horizontal window\r\n        > - `O` open the selected commit in a new tab\r\n        > - `-` runs a new `blame` in the selected commit\r\n\r\n    - *add/stage* use the `:Gwrite` command that save the actual file and adds\r\n      it to the index with the changes made. Is like doing a `git add` or its\r\n      synonym `git stage`\r\n\r\n    - *checkout* do a `:Gread`, empty the current buffer and restore the index\r\n      copy or what is the same, like if we were making a `git checkout` to the\r\n      file. The changes are not permanent until we save the file.\r\n\r\n    - *rm* remove the file with the `:Gremove` command and empty the buffer. We\r\n      get the same as if we do a `git rm` in the shell\r\n\r\n    - *mv* as for a new path and move the file there, renaming automatically the\r\n      buffer. The similar git command would be `git mv`. The target is relative to\r\n      the current path, unless is preceded by `/` in which case is relative to the\r\n      repository root\r\n\r\n    - *push* execute the `:Git! push` command, showing the output in the buffer\r\n\r\n    - *pull* do a `:Git! pull` redirecting the output to the buffer\r\n\r\n    - *command* run the git command that we entered in the command line and show\r\n      the result in a new buffer (exit from there by pressing `q`). We can use\r\n      the current custom alias in our git config. This option by itself is\r\n      reason enough to use Fugitive.\r\n\r\n    - *edit* allow us to \"edit\" any git object (blobs, trees, commits, tags). It\r\n      supports auto-completion and we can use a SHA, a branch, a tag, a tree or a\r\n      commit.\r\n\r\n    - *grep* do a grep over the repository using `:Ggrep` which in turn use `git\r\n      grep`\r\n\r\n    - *grep (messages)* make a grep over the repository using `:Glog --grep=` to\r\n      search into the commit messages\r\n\r\n    - *grep (text)* make a grep over the repository using `:Glog -S` to search\r\n      into the commits where the text had been added or removed\r\n\r\n    - *init* create a new git repository or reset a previous one (safe)\r\n\r\n    - *cd* change the working directory to the repository one\r\n\r\n    - *lcd* change the current buffer's working directory to the repository one\r\n\r\n    - *browse* if the remote repository is at GitHub open it in a browser,\r\n      showing the git object that  we have selected in that moment. Otherwise,\r\n      use `git instaweb` to display the current selected blob, tree, commit or\r\n      tag.  If a range is given, it is appropriately appended to the URL as an\r\n      anchor\r\n\r\n    Fugitive is a very powerful plugin that you only can learn how to use it by\r\n    using it. And is very advisable to read the help to get a global vision of\r\n    it.\r\n\r\n- *github dashboard* and *github activity* are two options to browse events at\r\n  GitHub. With the first one we can browse the GitHub Dashboard of a given user.\r\n  The last one allow us to view the public activity of a given user or repository.\r\n  There is a limit of 60 calls/hour on the GitHub API without authentication.\r\n\r\n    ![gh dashboard](http://joedicastro.com/static/pictures/gh_dashboard.png \"gh dashboard\")\r\n\r\n    > __Mappings__\r\n\r\n    > - `<Tab>` & `<S-Tab>` to navigate back and forth through the links\r\n    > - `<Enter>` open a link in the browser\r\n    > - R refresh the window\r\n    > - q close the window\r\n\r\n- *github issues & PR* open the external ncurses application [shipit][shpt]\r\n  that is an interface for GitHub issues and pull requests. The application is\r\n  still in development but is an amazing way to manage GitHub issues without\r\n  leaving Vim and the terminal. If you are inside a git repository that have a\r\n  remote in GitHub, it will open the app for that repository.\r\n\r\n    ![shipit](http://joedicastro.com/static/pictures/shipit.png \"shipit\")\r\n\r\n  [shpt]: https://github.com/alejandrogomez/shipit\r\n\r\n__Other tools__\r\n\r\n- *vim-gitgutter* show the changes that are made in the buffer versus the git\r\n  repository index. It makes a `git diff` and shows the status\r\n  (changed/added/deleted) of each line in the gutter (signs column).\r\n\r\n<a id=\"python\"></a>\r\n## Python\r\n\r\n![unite python](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu_python.png?raw=true \"unite python\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>p` or `:Unite menu:python` shows the python menu\r\n\r\n__Menu__\r\n\r\n- *run python code* run the current buffer python code via pymode. It shows the\r\n  output in a new vertical window below\r\n\r\n- *show docs for the current word* show the documentation available for the word\r\n  under the cursor\r\n\r\n- *insert a breakpoint* insert a breakpoint in python code. If we have `ipython`\r\n  or `pudb` installed, it will use one of those instead the python `pdb`\r\n\r\n- *pylint check* do a code revision by [pylint][pylint] by demand\r\n\r\n  [pylint]: http://www.pylint.org/\r\n\r\n- *rope auto-completion* allow us to use the rope auto-completion. Useful for\r\n  methods auto-completion.\r\n\r\n- *jump to definition* jump to the location where the word under the cursor\r\n  (variable, function, class, method, ...) is defined. Open a new window with\r\n  the location, even if it is in another module or library\r\n\r\n- *reorganize imports* reorganize automatically the import statements\r\n\r\n- *refactorize - x* the entries that begin in this way are for refactorize the\r\n  python code with rope, using the method mentioned in each description\r\n\r\n- *show docs for current word* use rope to show the available documentation\r\n  about the word under the cursor. The advantage of this entry against the\r\n  pymode one is that this one allow us to search in the external libraries\r\n  documentation\r\n\r\n- *list virtualenvs* use the virtualenv plugin to list the python virtualenvs.\r\n\r\n- *activate virtualenv* activate the virtualenv\r\n\r\n- *deactivate virtualenv* deactivate the virtualenv\r\n\r\n- *run coverage2* and *run coverage3* use the [coverage.py][cvg] tool for\r\n  python2 and python3 respectively. It shows us the results in a window and as\r\n  marks in the signs column (gutter) to know the code coverage of the current\r\n  code.\r\n\r\n  [cvg]: http://nedbatchelder.com/code/coverage/\r\n\r\n- *toggle coverage report* and *toggle coverage marks* toggle the visibility of\r\n  the marks and report from coverage\r\n\r\n<a id=\"web\"></a>\r\n## Web Development\r\n\r\n__HTML5__\r\n\r\nProvides autocompletion, syntax and indentation for HTML5. For that purpose\r\nsupports SVG, RDFa, microdata and WAI-AIRA\r\n\r\n\r\n__Emmet__\r\n\r\n![emmet](http://joedicastro.com/static/pictures/emmet.gif \"emmet\")\r\n\r\nEmmet (former Zen Coding) allow us to write HTML/XML and CSS files more fast and\r\nin a more brief and less tedious way. Emmet takes the snippets idea to a whole\r\nnew level: you can type CSS-like expressions that can be dynamically parsed, and\r\nproduce output depending on what you type in the abbreviation.\r\n\r\nThe best way to know how this works is to look at the tutorial (`:h\r\nemmet-tutorial` <vimhelp:emmet-tutorial>) or read the official documentation,\r\n[Emmet docs](http://docs.emmet.io/)\r\n\r\n> __Mappings__\r\n\r\n> - `<C-Y>,` expand abbreviation (works as a wraper in visual mode, see the help)\r\n> - `<C-Y>d` select the tag inward\r\n> - `<C-Y>D` select the tag outward\r\n> - `<C-Y>n` go to the next edit point\r\n> - `<C-Y>N` go to the previous edit point\r\n> - `<C-Y>i` update image size\r\n> - `<C-Y>k` remove tag\r\n> - `<C-Y>j` split/join tag\r\n> - `<C-Y>/` toggle comment\r\n> - `<C-Y>a` make anchor from url\r\n> - `<C-Y>A` make quoted text from url\r\n> - `<C-Y>c` code pretty\r\n\r\n<a id=\"bookmarks\"></a>\r\n## Bookmarks\r\n\r\n![unite bookmarks](http://joedicastro.com/static/pictures/unite_menu_bookmarks.png \"unite bookmarks\")\r\n\r\nWith this menu we can manage the bookmarks easily.\r\n\r\n__Unite__\r\n\r\n`<LocalLeader>m` or `:Unite menu:bookmarks` shows the bookmarks menu\r\n\r\n<a id=\"vim\"></a>\r\n## Vim\r\n\r\n![unite vim](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu_vim.png?raw=true \"unite vim\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>v` or `:Unite menu:vim` shows the vim menu\r\n\r\n__Menu__\r\n\r\nThese are the menu entries in detail:\r\n\r\n- *choose color scheme* display color scheme with preview support\r\n\r\n    ![unite_colorscheme](http://joedicastro.com/static/pictures/unite_colorscheme_en.gif \"unite colorscheme\")\r\n\r\n- *mappings*  shows all the customized mappings available whit their\r\n  corresponding associated action. Those ones that corresponds with plugins that\r\n  are Lazy are not showed unless the plugin is already loaded.\r\n\r\n- *edit configuration file (vimrc)* edits the vim configuration file `~./.vimrc`\r\n\r\n- *choose filetype* choose a filetype from a list to apply to the current buffer\r\n\r\n- *vim help* search into the vim help (slow)\r\n\r\n- *vim commands* list all commands available as candidates. For Lazy plugins,\r\n  these need to be loaded before appears in the list.\r\n\r\n- *vim functions* same as above for functions instead of commands\r\n\r\n- *vim runtimepath* shows all paths in the vim runtimepath\r\n\r\n- *vim command output* shows the output of a Vim command through the Unite\r\n  interface (e.g. `:ls`)\r\n\r\n- *unite sources* all the Unite sources available\r\n\r\n- *kill process* shows the output of the Unix command `top` where we can select\r\n  one or more process to kill them with `kill`\r\n\r\n- *launch executable* launch an executable from a list, in a similar behavior as\r\n  `dmenu`\r\n\r\n<a id=\"neobundle\"></a>\r\n## Neobundle\r\n\r\n![neobundle](http://joedicastro.com/static/pictures/unite_menu_neobundle_en.png \"neobundle\")\r\n\r\nA plugin to rule them all! NeoBundle allows us to manage the rest of the plugins,\r\nitself included. __I have it configured to auto install itself and all of the\r\nplugins when Vim is executed for the first time__.\r\n\r\nThe advantages of NeoBundle versus Vundle and other similar plugins are the\r\nfollowing:\r\n\r\n- Allows to use another VCS other than git (hg, svn), even a local dir\r\n- Allows revision lock or even set a plugin to not be updated\r\n- Supports lazy initialization of plugins to optimizing startup time\r\n- Supports multiple config options per plugin, like automatic building if needed\r\n- and so on...\r\n\r\nThe best way to use NeoBundle is through Unite:\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>n` or `:Unite menu:neobundle`, shows the NeoBundle menu\r\n\r\n__Menu__\r\n\r\nThese are the menu entries in detail:\r\n\r\n- *neobundle* shows the installed plugins as candidates. Via the actions we can\r\n  delete them, browse the repository page, ...\r\n\r\n- *log* shows the last NeoBundle log\r\n\r\n- *lazy* shows all the installed plugins configured as Lazy. Those are loaded on\r\n  demand and allow us to have a lot of plugins installed that are not frequently\r\n  used without delaying the vim startup. I use this option a lot in this\r\n  configuration.\r\n\r\n- *update* updates all the plugins automatically (and installs those not already\r\n  installed)\r\n\r\n- *search* searches plugins by name on vim.org & GitHub (duplicates prone)\r\n\r\n- *install* installs all the plugins already present in the `.vimrc` file or in\r\n  the `direct_bundles.vim` file that are not yet installed\r\n\r\n- *check* checks if all the plugins are already installed, and if not, prompt\r\n  for their installation\r\n\r\n- *docs* installs help docs for all plugins manually\r\n\r\n- *clean* deletes, upon confirmation, those plugin folders that are no longer\r\n  needed because they are not still installed\r\n\r\n- *list* lists all the installed plugins\r\n\r\n- *direct edit* edits the `~/.vim/bundle/.neobundle/direct_bundles.vim` file\r\n  where NeoBundle stores those plugins installed directly (e.g. via NeoBundle\r\n  search)\r\n\r\n> __Plugins updating__\r\n\r\n> Since we often install plugins from repositories, we are exposed to error-\r\n> prone updates. Once in a while, a plugin update introduces a bug and you end up\r\n> with an unstable configuration until that bug is fixed (which may take a while).\r\n> If we use Vim for work, that is very inconvenient.\r\n\r\n> A way to avoid this is by using symbolic links and backups of our vim folder.\r\n> If we made a backup of our vim config before an update, is easy to restore it\r\n> to a previous stable state without much effort. But this is tedious and\r\n> error-prone too. And alternative is managing this via NeoBundle. We can use\r\n> the revision lock feature to specify what revision we want to install or even\r\n> say to NeoBundle that a plugin should not be updated. But it is not a perfect\r\n> solution either, and very manual. Maybe in a future, we could do plugin\r\n> rollbacks...\r\n\r\n<a id=\"spelling\"></a>\r\n## Spell checking & translation\r\n\r\n![unite spelling](https://github.com/liangxianzhe/oh-my-vim-image/blob/master/unite_menu_spelling.png?raw=true \"unite spelling\")\r\n\r\n__Unite__\r\n\r\n- `<LocalLeader>s` or `:Unite menu:spelling` shows the spelling menu\r\n\r\n__Other tools__\r\n\r\n- `T` Translate selected text to Chinese. \r\n\r\n<a id=\"markdown\"></a>\r\n## Markdown\r\n\r\n![unite markdown](http://joedicastro.com/static/pictures/unite_menu_markdown_en.png \"unite markdown\")\r\n\r\nThis allows us to preview the rendering of a Markdown file in the browser,\r\nit supports the Markdown `extra` extension. The file is rendered by\r\nPython-markdown, creating a temporal html file and open it in a browser tab.\r\n\r\nUsed in conjunction with a plugin that refresh the browser tab when the html file\r\nchanges, we get a way to preview your document changes without leaving vim .\r\n\r\n__Unite__\r\n\r\n- `<localleader>k` or`:Unite menu:markdown` shows the markdown menu\r\n\r\n__Menu__\r\n\r\n- *preview* renders the Markdown document in a temporal html file and open it in\r\n  a new browser tab (currently only work on Mac)\r\n\r\n- *refresh* rewrites the html file with the changes\r\n\r\n    ![mep]( http://joedicastro.com/static/pictures/mep_en.gif \"mep\")\r\n\r\n<a id=\"tools\"></a>\r\n## Some other tools\r\n\r\n![unite tools](http://joedicastro.com/static/pictures/unite_menu_tools.png \"unite tools\")\r\n\r\n__Unite__\r\n\r\n`<LocalLeader>t` or `:Unite menu:tools` shows the tools menu\r\n\r\n__Menu__\r\n\r\nThese are the menu entries in detail:\r\n\r\n- *run with python2 in tmux panel* use the Vimux plugin to interact with Tmux.\r\n  It allows to send commands to a Tmux panel and interact with it without losing\r\n  focus in Vim. If there are no other tmux panels opened, then a new panel is\r\n  opened in the 20% lower space. In other case, the command runs in the already\r\n  opened panel. This specific command run the buffer content with the `python2`\r\n  executable in the tmux panel. In the next image we can see the actual\r\n  behavior:\r\n\r\n    ![vimux](http://joedicastro.com/static/pictures/vimux_en.gif \"vimux\")\r\n\r\n- *run with python3 in tmux panel* same as above but using the `python3`\r\n  interpreter\r\n\r\n- *run with python2 & time in tmux panel* run the python code wrapped by the\r\n  Unix `time` program to know the time consumed in the execution\r\n\r\n- *run with pypy & time in tmux panel* same as above but using `pypy` instead of\r\n  `python2`\r\n\r\n- *command prompt to run in tmux panel* open a command line prompt to enter a\r\n  custom command to run in a tmux panel\r\n\r\n- *repeat last command* repeat the last vimux command\r\n\r\n- *stop command execution in tmux panel* stop the execution of the last vimux\r\n  command\r\n\r\n- *inspect tmux panel* jump to the tmux panel where the last vimux command was\r\n  executed and enter in the tmux *copy mode* allowing us to scroll around the\r\n  panel and use the *vi mode* to copy text lines\r\n\r\n- *close tmux panel* close the tmux panel opened or used by Vimux\r\n\r\n- *open link* open link under cursor using utl.vim\r\n    ![utl](http://joedicastro.com/static/pictures/utl_en.gif \"utl\")\r\n\r\n__Other tools__\r\n\r\n- DirDiff\r\n\r\nIt has a similar behavior that the vimdiff tool but for directories instead\r\nof individual files\r\n\r\n![DirDiff](http://joedicastro.com/static/pictures/dirdiff_en.gif \"DirDiff\")\r\n\r\n> __Commands__\r\n\r\n> - `:DirDiff {A:directory 1} {B: directory 2}` shows the differences between\r\n>   the two directories\r\n> - `:DirDiffQuit` exit from DirDiff mode\r\n\r\n\r\n- Hexadecimal Editor\r\n\r\nFor this I use the Vinarise plugin, a well thought hexadecimal editor for Vim.\r\n\r\nNo play with this, is not a toy, this is for grown ups only! If you do not know\r\nwhat you are doing, keep your hands out of it! :smile: If you are all thumbs,\r\nthis tool is a sure candidate for a disaster.\r\n\r\n![hex](http://joedicastro.com/static/pictures/vinarise_en.png \"hex\")\r\n\r\n> __Mappings__\r\n\r\n- `<F6>` entry into the Hexadecimal mode\r\n- `V`  edit the file in ASCII mode with Vim (Vinarise keeps opened)\r\n- `q`  hide Vinarise\r\n- `Q`  quit Vinarise\r\n- `<C-G>` show current position\r\n- `r`  change current address\r\n- `R`  overwrite from current address\r\n- `gG` move to input address\r\n- `go` move by offset address\r\n- `/`  search binary value\r\n- `?`  search binary value reverse\r\n- `g/` search string value\r\n- `g?` search string value reverse\r\n- `e/` search regular expression (search only forward)\r\n- `E`  change encoding\r\n- `<C-L>` redraw\r\n- `g<C-L>` reload\r\n\r\n# Plugins & Colorschemes\r\n\r\n- __badwolf__  <https://github.com/sjl/badwolf>\r\n- __coveragepy.vim__ <https://github.com/alfredodeza/coveragepy.vim>\r\n- __crontab.vim__ <https://github.com/vim-scripts/crontab.vim>\r\n- __csapprox__ <https://github.com/godlygeek/csapprox>\r\n- __delimitMate__ <https://github.com/Raimondi/delimitMate>\r\n- __DirDiff.vim__ <http://github.com/joedicastro/DirDiff.vim>\r\n- __easydigraph.vim__ <https://github.com/Rykka/easydigraph.vim>\r\n- __emmet-vim__ <https://github.com/mattn/emmet-vim>\r\n- __gitv__ <https://github.com/gregsexton/gitv>\r\n- __gundo.vim__ <https://github.com/sjl/gundo.vim>\r\n- __harlequin__ <https://github.com/nielsmadan/harlequin>\r\n- __html5.vim__ <https://github.com/othree/html5.vim>\r\n- __indentLine__ <https://github.com/Yggdroot/indentLine>\r\n- __JSON.vim__ <https://github.com/vim-scripts/JSON.vim>\r\n- __junkfile.vim__ <https://github.com/Shougo/junkfile.vim>\r\n- __loremipsum__ <https://github.com/vim-scripts/loremipsum>\r\n- __molokai__ <https://github.com/tomasr/molokai>\r\n- __neobundle.vim__ <https://github.com/Shougo/neobundle.vim>\r\n- __neocomplete.vim__ <https://github.com/Shougo/neocomplete.vim>\r\n- __po.vim--gray__ <https://github.com/vim-scripts/po.vim--gray>\r\n- __python-mode__ <https://github.com/klen/python-mode>\r\n- __summerfruit256.vim__ <https://github.com/vim-scripts/summerfruit256.vim>\r\n- __syntastic__ <https://github.com/scrooloose/syntastic>\r\n- __ultisnips__ <https://github.com/SirVer/ultisnips>\r\n- __unite-colorscheme__ <https://github.com/ujihisa/unite-colorscheme>\r\n- __unite-filetype__ <https://github.com/osyo-manga/unite-filetype>\r\n- __unite-fold__ <https://github.com/osyo-manga/unite-fold>\r\n- __unite-help__ <https://github.com/tsukkee/unite-help?>\r\n- __unite-locate__ <https://github.com/ujihisa/unite-locate>\r\n- __unite-mark__ <https://github.com/tacroe/unite-mark>\r\n- __unite-outline__ <https://github.com/Shougo/unite-outline>\r\n- __unite-quickfix__ <https://github.com/osyo-manga/unite-quickfix>\r\n- __unite.vim__ <https://github.com/Shougo/unite.vim>\r\n- __utl.vim__ <https://github.com/vim-scripts/utl.vim>\r\n- __vim-airline__ <https://github.com/bling/vim-airline>\r\n- __vim-characterize__ <https://github.com/tpope/vim-characterize>\r\n- __vim-commentary__ <https://github.com/tpope/vim-commentary>\r\n- __vim-fugitive__ <https://github.com/tpope/vim-fugitive>\r\n- __vim-gitgutter__ <https://github.com/airblade/vim-gitgutter>\r\n- __vim-github256__ <https://github.com/joedicastro/vim-github256>\r\n- __vim-github-dashboard__ <https://github.com/junegunn/vim-github-dashboard>\r\n- __vim-markdown__ <https://github.com/joedicastro/vim-markdown>\r\n- __vim-markdown-extra-preview__ <https://github.com/joedicastro/vim-markdown-extra-preview>\r\n- __vim-molokai256__  <https://github.com/joedicastro/vim-molokai256>\r\n- __vim-pentadactyl__ <https://github.com/joedicastro/vim-pentadactyl>\r\n- __vim-repeat__ <https://github.com/tpope/vim-repeat>\r\n- __vim-signature__ <https://github.com/kshenoy/vim-signature>\r\n- __vim-snippets__ <https://github.com/honza/vim-snippets>\r\n- __vim-speeddating__ <https://github.com/tpope/vim-speeddating>\r\n- __vim-surround__ <https://github.com/tpope/vim-surround>\r\n- __vim-textobj-entire__ <https://github.com/kana/vim-textobj-entire>\r\n- __vim-textobj-indent__ <https://github.com/kana/vim-textobj-indent>\r\n- __vim-textobj-lastpat__ <https://github.com/kana/vim-textobj-lastpat>\r\n- __vim-textobj-line__ <https://github.com/kana/vim-textobj-line>\r\n- __vim-textobj-underscore__ <https://github.com/kana/vim-textobj-underscore>\r\n- __vim-textobj-user__ <https://github.com/kana/vim-textobj-user>\r\n- __vim-tmux__ <https://github.com/vimez/vim-tmux>\r\n- __vim-transpose__ <https://github.com/salsifis/vim-transpose>\r\n- __vim-unite-history__ <https://github.com/thinca/vim-unite-history>\r\n- __vim-virtualenv__ <https://github.com/jmcantrell/vim-virtualenv>\r\n- __vimfiler__ <https://github.com/Shougo/vimfiler.vim>\r\n- __vimproc__ <https://github.com/Shougo/vimproc.vim>\r\n- __vimux__ <https://github.com/benmills/vimux>\r\n- __vinarise.vim__ <https://github.com/Shougo/vinarise.vim>\r\n- __webapi-vim__ <https://github.com/mattn/webapi-vim>\r\n- __winresizer__ <https://github.com/jimsei/winresizer>\r\n- __zoomwintab.vim__ <https://github.com/vim-scripts/zoomwintab.vim>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}